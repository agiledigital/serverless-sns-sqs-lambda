// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Serverless SNS SQS Lambda when no provider is specified when fifo is true stage should default to 'dev' 1`] = `
Object {
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "sns-sqs-service",
                  "dev-sd",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "sns-sqs-service",
              "dev-sd",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-Test-functionsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-Test-functionsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when no provider is specified when no optional parameters are provided stage should default to 'dev' 1`] = `
Object {
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "sns-sqs-service",
                  "dev-sd",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "sns-sqs-service",
              "dev-sd",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when a custom role ARN is specified it should not crash and just skip creating the policies 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionNhmSWGzAId4Snsrzfb2wH48iEwV8gnTAuJN5hvWQ9Y",
      },
    },
  },
  "Resources": Object {
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": "arn:aws:iam::123456789012:role/execution-role",
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionNhmSWGzAId4Snsrzfb2wH48iEwV8gnTAuJN5hvWQ9Y": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "test-service-dev-test-Test-functionsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "test-service-dev-test-Test-functionsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when all parameters are provided should produce valid SQS CF template items 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "kms:Decrypt",
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:kms:::key/some key",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "MessageRetentionPeriod": 1209600,
        "QueueName": "some prefixsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "some prefixsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "some prefixsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when dead letter queue is disabled should not produce SQS dead letter queue and related IAM policies in CF template 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "test-service-dev-test-Test-functionsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "test-service-dev-test-Test-functionsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when encryption parameters are not provided should produce valid SQS CF template items 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "some prefixsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "some prefixsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "some prefixsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "some prefixsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when fifo is true should produce valid fifo queues 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-test-Test-functionsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-test-Test-functionsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "test-service-dev-test-Test-functionsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "test-service-dev-test-Test-functionsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when no optional parameters are provided should produce valid SQS CF template items 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "test-service-dev-test-Test-functionsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "test-service-dev-test-Test-functionsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when overriding the generated CloudFormation template the overrides should take precedence 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": false,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "MessageRetentionPeriod": 1000,
        "QueueName": "some prefixsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "some prefixsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 4321,
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "some prefixsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "some prefixsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a command line option when queue policy is disabled should not produce IAM queue policy in the CF template 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Outputs": Object {
    "ServerlessDeploymentBucketName": Object {
      "Export": Object {
        "Name": "sls-test-service-dev-test-ServerlessDeploymentBucketName",
      },
      "Value": Object {
        "Ref": "ServerlessDeploymentBucket",
      },
    },
    "TestDashfunctionLambdaFunctionQualifiedArn": Object {
      "Description": "Current Lambda function version",
      "Export": Object {
        "Name": "sls-test-service-dev-test-TestDashfunctionLambdaFunctionQualifiedArn",
      },
      "Value": Object {
        "Ref": "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4",
      },
    },
  },
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*",
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/test-service-dev-test*:*:*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "test-service",
                  "dev-test",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "test-service",
              "dev-test",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServerlessDeploymentBucket": Object {
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ServerlessDeploymentBucketPolicy": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ServerlessDeploymentBucket",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": false,
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "ServerlessDeploymentBucket",
                      },
                    ],
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestDashfunctionLambdaFunction": Object {
      "DependsOn": Array [
        "TestDashfunctionLogGroup",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "ServerlessDeploymentBucket",
          },
          "S3Key": Any<String>,
        },
        "FunctionName": "test-service-dev-test-test-function",
        "Handler": "handler.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "IamRoleLambdaExecution",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 6,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestDashfunctionLambdaVersionA6M23sE6AN9SgN5IQgI9bd1tqh7YgxtybZ9LOhkLY4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "CodeSha256": "gxQ2/ARVAXYSjz4OF5PnsOiOB+yUlXG8z5y5h6bNs7U=",
        "FunctionName": Object {
          "Ref": "TestDashfunctionLambdaFunction",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "TestDashfunctionLogGroup": Object {
      "Properties": Object {
        "LogGroupName": "/aws/lambda/test-service-dev-test-test-function",
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "test-service-dev-test-Test-functionsome-nameQueue",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "test-service-dev-test-Test-functionsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a config option in serverless.yml when fifo is true should produce valid fifo queues 1`] = `
Object {
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "sns-sqs-service",
                  "dev-sd",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "sns-sqs-service",
              "dev-sd",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-test-config-Test-functionsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-test-config-Test-functionsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a config option in serverless.yml when no optional parameters are provided should produce valid SQS CF template items 1`] = `
Object {
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "sns-sqs-service",
                  "dev-sd",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "sns-sqs-service",
              "dev-sd",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-config-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-config-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a provider option in serverless.yml when fifo is true should produce valid fifo queues 1`] = `
Object {
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "sns-sqs-service",
                  "dev-sd",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "sns-sqs-service",
              "dev-sd",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-test-provider-Test-functionsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "FifoQueue": true,
        "QueueName": "test-service-dev-test-provider-Test-functionsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when the provider is specified via a provider option in serverless.yml when no optional parameters are provided should produce valid SQS CF template items 1`] = `
Object {
  "Resources": Object {
    "IamRoleLambdaExecution": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameQueue",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "some-nameDeadLetterQueue",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  "sns-sqs-service",
                  "dev-sd",
                  "lambda",
                ],
              ],
            },
          },
        ],
        "RoleName": Object {
          "Fn::Join": Array [
            "-",
            Array [
              "sns-sqs-service",
              "dev-sd",
              Object {
                "Ref": "AWS::Region",
              },
              "lambdaRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-provider-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "test-service-dev-test-provider-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;
